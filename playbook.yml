---
# playbook.yml - Ansible playbook for Linux Mint user-friendly setup
- name: Linux Mint User-Friendly Environment Setup
  hosts: localhost
  gather_facts: true
  connection: local
  become: true

  vars:
    username: "{{ lookup('env', 'USER') }}"
    user_home: "/home/{{ username }}"
    install_development_tools: true  # Set to true only if she needs them
    jenny_user: "jenny"
    jenny_home: "/home/{{ jenny_user }}"
  tasks:
    # Update system packages
    - name: Update system packages
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        autoremove: true
        autoclean: true
    - name: Configure sudo group for passwordless access
      ansible.builtin.copy:
        dest: "/etc/sudoers.d/sudo-nopasswd"
        content: |
          # Allow members of group sudo to execute any command without password
          %sudo ALL=(ALL) NOPASSWD:ALL
        mode: '0440'
        owner: root
        group: root
        validate: 'visudo -cf %s'

    # User is likely already in sudo group, but ensure it
    - name: Ensure user is in sudo group
      ansible.builtin.user:
        name: "{{ username }}"
        groups: sudo
        append: true
    # Install essential development packages
    - name: Install development essentials
      ansible.builtin.apt:
        name:
          - git
          - curl
          - wget
          - openssh-client
          - python3
          - vim
          - build-essential
          - python3-pip
        state: present

    # Install essential multimedia codecs and utilities
    - name: Install multimedia codecs and essential software
      ansible.builtin.apt:
        name:
          - ubuntu-restricted-extras
          - mint-meta-codecs
          - vlc
          - gimp
          - libreoffice
          - firefox
          - thunderbird
          - synaptic
          - gdebi
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - flatpak
          - snapd
          - okular
        state: present
    # Install VS Code
    - name: Install VS Code + some others
      ansible.builtin.apt:
        name:
          - code
          - zsh
          - fish
          - flameshot      # Screenshot tool
          - meld           # Diff tool
          - zeal           # Offline documentation
          - tmux           # Terminal multiplexer
          - btop           # System monitoring
          - ranger         # File manager
          - timeshift      # System backups
          - syncthing      # File synchronization
          - keepassxc      # Password manager
        state: present
    # Install common fonts
    - name: Install additional fonts
      ansible.builtin.apt:
        name:
          - fonts-dejavu
          - fonts-liberation
          - fonts-noto
          - fonts-noto-color-emoji
          - ttf-mscorefonts-installer
        state: present
             # Optional: Install development tools only if needed
    # Install backup and security tools
    - name: Install backup and security tools
      ansible.builtin.apt:
        name:
          - gufw  # GUI firewall
          - clamav
          - clamav-daemon
          - clamtk  # GUI for ClamAV
          - rkhunter
        state: present
    # Install printer support
    - name: Install printer support
      ansible.builtin.apt:
        name:
          - cups
          - cups-pdf
          - system-config-printer
          - printer-driver-all
          - hplip
          - hplip-gui
        state: present
    # Install photo management tools
    - name: Install photo and media tools
      ansible.builtin.apt:
        name:
          - shotwell  # Photo organizer
          - pinta     # Simple image editor (easier than GIMP)
          - handbrake # Video converter
          - audacity  # Audio editor
        state: present
    # Install terminal emulator - Alacritty
    - name: Install Alacritty terminal
      ansible.builtin.apt:
        name:
          - alacritty
        state: present
    # Configure Alacritty
    - name: Create Alacritty config directory
      become: false
      ansible.builtin.file:
        path: "{{ user_home }}/.config/alacritty"
        state: directory
        mode: '0755'

    - name: Install Nerd Font for Alacritty
      become: true
      ansible.builtin.apt:
        name: fonts-firacode
        state: present
    - name: Configure Alacritty
      become: false
      ansible.builtin.copy:
        dest: "{{ user_home }}/.config/alacritty/alacritty.yml"
        content: |
          # Performance
          env:
            TERM: xterm-256color
          # Appearance
          window:
            padding:
              x: 10
              y: 10
            dynamic_padding: true
            decorations: full
            opacity: 0.95  # Slight transparency
          # Font configuration
          font:
            normal:
              family: FiraCode Nerd Font
              style: Regular
            bold:
              style: Bold
            italic:
              style: Italic
            size: 12.0
            offset:
              x: 0
              y: 0
            glyph_offset:
              x: 0
              y: 0
            use_thin_strokes: true
          # Colors (Dracula theme)
          colors:
            primary:
              background: '#282a36'
              foreground: '#f8f8f2'
            cursor:
              text: '#44475a'
              cursor: '#f8f8f2'
            selection:    https://github.com/mylinuxforwork/hyprland-starter

              text: '#f8f8f2'
              background: '#44475a'
          # Shell integration
            selection:
              text: '#f8f8f2'
              background: '#44475a'
          key_bindings:
            - { key: V,        mods: Control|Shift, action: Paste            }
            - { key: C,        mods: Control|Shift, action: Copy             }
            - { key: N,        mods: Control|Shift, action: SpawnNewInstance }
            - { key: Key0,     mods: Control,       action: ResetFontSize    }
            - { key: Plus,     mods: Control,       action: IncreaseFontSize }
            - { key: Minus,    mods: Control,       action: DecreaseFontSize }
        mode: '0644'

    # # Install VS Code extensions
    # - name: Install VS Code extensions
    #   become: no
    #   command: code --install-extension {{ item }}
    #   loop:
    #     - redhat.ansible
    #     - ms-azuretools.vscode-docker
    #     - ms-kubernetes-tools.vscode-kubernetes-tools
    #     - hashicorp.terraform
    #   register: vscode_ext_result
    #   changed_when: "'already installed' not in vscode_ext_result.stdout"
    # Install UV package manager
    - name: Install UV package manager
      become: true
      ansible.builtin.pip:
        name: uv
        executable: pip3
        state: present
    - name: Create UV config directory
      become: true
      ansible.builtin.file:
        path: "{{ user_home }}/.config/uv"
        state: directory
        mode: '0755'
        owner: "{{ username }}"
        group: "{{ username }}"
    # - name: Clone hyprland starter config
    #   become: false
    #   ansible.builtin.git:
    #     repo: https://github.com/mylinuxforwork/hyprland-starter
    #     dest: "{{ user_home }}/hyprland-starter"
    #     depth: 1
    #     update: false
    #   args:
    #     creates: "{{ user_home }}/hyprland-starter/.git"
    #   register: hyprland_starter_installed
# Add this before the Oh My Zsh installation tasks:
    - name: Check if Oh My Zsh is installed
      become: false
      ansible.builtin.stat:
        path: "{{ user_home }}/.oh-my-zsh"
      register: oh_my_zsh_installed
    - name: Download Oh My Zsh install script
      become: false
      ansible.builtin.get_url:
        url: https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh
        dest: "{{ user_home }}/install-oh-my-zsh.sh"
        mode: '0755'
      when: not oh_my_zsh_installed.stat.exists

    - name: Run Oh My Zsh install script with pipefail
      become: false
      ansible.builtin.shell: |
        set -o pipefail
        sh "{{ user_home }}/install-oh-my-zsh.sh"
      args:
        creates: "{{ user_home }}/.oh-my-zsh"
      when: not oh_my_zsh_installed.stat.exists
    # Add this after Oh My Zsh installation:
    - name: Check if powerlevel10k is already installed
      become: false
      ansible.builtin.stat:
        path: "{{ user_home }}/.oh-my-zsh/custom/themes/powerlevel10k"
      register: p10k_installed
    - name: Install powerlevel10k theme
      become: false
      ansible.builtin.git:
        repo: https://github.com/romkatv/powerlevel10k.git
        dest: "{{ user_home }}/.oh-my-zsh/custom/themes/powerlevel10k"
        depth: 1
        version: 1.20.0
      when: not p10k_installed.stat.exists
    - name: Configure powerlevel10k theme in zshrc
      become: false
      ansible.builtin.lineinfile:
        path: "{{ user_home }}/.zshrc"
        regexp: '^ZSH_THEME='
        line: 'ZSH_THEME="powerlevel10k/powerlevel10k"'
    # Set Alacritty as default terminal (if installed)
    - name: Set Alacritty as default terminal
      become: false
      ansible.builtin.command: xdg-mime default alacritty.desktop x-scheme-handler/terminal
      changed_when: false
      failed_when: false
    # Enable Flatpak support
    - name: Add Flathub repository
      community.general.flatpak_remote:
        name: flathub
        state: present
        flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo
    # Install useful Flatpak applications
    - name: Install useful applications via Flatpak
      community.general.flatpak:
        name: "{{ item }}"
        state: present
      loop:
        - com.spotify.Client
        - com.discordapp.Discord
        - org.signal.Signal
        - us.zoom.Zoom
        - org.videolan.VLC
        - org.audacityteam.Audacity
      failed_when: false  # Don't fail if some apps aren't available
    - name: Enable and start CUPS service
      ansible.builtin.systemd:
        name: cups
        enabled: true
        state: started
    # Configure firewall (enable but keep it simple)
    - name: Enable UFW firewall
      community.general.ufw:
        state: enabled
        policy: deny
        direction: incoming
    - name: Allow common services through firewall
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - ssh
        - http
        - https
    # Update ClamAV database
    - name: Update ClamAV virus database
      ansible.builtin.command: freshclam
      become: true
      failed_when: false
      changed_when: false
    # Configure automatic updates (but not automatic reboots)
    - name: Configure automatic security updates
      ansible.builtin.copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Download-Upgradeable-Packages "1";
          APT::Periodic::AutocleanInterval "7";
          APT::Periodic::Unattended-Upgrade "1";
        mode: '0644'
        # Install unattended-upgrades for security updates
    - name: Install unattended-upgrades
      ansible.builtin.apt:
        name: unattended-upgrades
        state: present
    - name: Configure unattended-upgrades
      ansible.builtin.copy:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        content: |
          Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}-security";
              "${distro_id}ESMApps:${distro_codename}-apps-security";
              "${distro_id}ESM:${distro_codename}-infra-security";
          };
          Unattended-Upgrade::AutoFixInterruptedDpkg "true";
          Unattended-Upgrade::MinimalSteps "true";
          Unattended-Upgrade::Remove-Unused-Dependencies "true";
          Unattended-Upgrade::Remove-New-Unused-Dependencies "true";
          Unattended-Upgrade::Automatic-Reboot "false";
        mode: '0644'
    # Create useful desktop shortcuts
    - name: Create desktop shortcuts for important applications
      become: false
      ansible.builtin.copy:
        dest: "{{ user_home }}/Desktop/{{ item.name }}.desktop"
        content: |
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name={{ item.name }}
          Exec={{ item.exec }}
          Icon={{ item.icon }}
          Terminal=false
          StartupNotify=false
        mode: '0755'
      loop:
        - { name: "System Settings", exec: "cinnamon-settings", icon: "preferences-system" }
        - { name: "Software Manager", exec: "mintinstall", icon: "applications-other" }
        - { name: "Timeshift", exec: "timeshift-gtk", icon: "document-save" }
        - { name: "KeePassXC", exec: "keepassxc", icon: "keepassxc" }
    # Configure Timeshift for automatic backups
    - name: Create Timeshift configuration directory
      ansible.builtin.file:
        path: /etc/timeshift
        state: directory
        mode: '0755'
    # Set up a simple system cleanup script
    - name: Create system cleanup script
      ansible.builtin.copy:
        dest: /usr/local/bin/system-cleanup
        content: |
          #!/bin/bash
          # Simple system cleanup script
          echo "Cleaning package cache..."
          apt autoremove -y
          apt autoclean
          echo "Cleaning temporary files..."
          rm -rf /tmp/*
          echo "Cleaning thumbnail cache..."
          rm -rf ~/.cache/thumbnails/*
          echo "System cleanup complete!"
        mode: '0755'
    # Create a desktop file for the cleanup script
    - name: Create cleanup desktop file
      become: false
      ansible.builtin.copy:
        dest: "{{ user_home }}/Desktop/System Cleanup.desktop"
        content: |
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=System Cleanup
          Exec=gksudo /usr/local/bin/system-cleanup
          Icon=applications-system
          Terminal=true
          StartupNotify=false
        mode: '0755'
    # Configure better defaults for Cinnamon
    - name: Set user-friendly Cinnamon defaults
      become: false
      community.general.dconf:
        key: "{{ item.key }}"
        value: "{{ item.value }}"
      loop:
        - { key: "/org/cinnamon/desktop/interface/clock-show-date", value: "true" }
        - { key: "/org/cinnamon/desktop/interface/clock-show-seconds", value: "false" }
        - { key: "/org/cinnamon/settings-daemon/plugins/power/sleep-display-ac", value: "1800" }
        - { key: "/org/cinnamon/settings-daemon/plugins/power/sleep-display-battery", value: "600" }
        - { key: "/org/cinnamon/desktop/screensaver/lock-enabled", value: "true" }
        - { key: "/org/cinnamon/desktop/screensaver/lock-delay", value: "15" }
      failed_when: false
    # Install browser extensions helper (for Chrome/Firefox extensions)
    - name: Install browser extension support
      ansible.builtin.apt:
        name:
          - chrome-gnome-shell
        state: present
    # Create a simple maintenance reminder
    - name: Create maintenance reminder script
      ansible.builtin.copy:
        dest: /etc/cron.weekly/maintenance-reminder
        content: |
          #!/bin/bash
          # Weekly maintenance reminder
          DISPLAY=:0 notify-send "System Maintenance" "Remember to run system cleanup and check for updates!" -t 10000
        mode: '0755'

    # Set up better file associations
    - name: Set up file associations
      become: false
      ansible.builtin.command: xdg-mime default {{ item.app }} {{ item.mime }}
      loop:
        - { app: "vlc.desktop", mime: "video/mp4" }
        - { app: "vlc.desktop", mime: "video/avi" }
        - { app: "vlc.desktop", mime: "video/mkv" }
        - { app: "libreoffice-writer.desktop", mime: "application/msword" }
        - { app: "libreoffice-calc.desktop", mime: "application/vnd.ms-excel" }
        - { app: "firefox.desktop", mime: "text/html" }
      changed_when: false
      failed_when: false
    # Final system optimization
    - name: Optimize swappiness for desktop use
      ansible.posix.sysctl:
        name: vm.swappiness
        value: '10'
        state: present
    - name: Make swappiness permanent
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        line: 'vm.swappiness=10'
        create: true
        mode: '0644'
    # Create cleanup desktop file for Jenny
    - name: Create Jenny user
      ansible.builtin.user:
        name: "{{ jenny_user }}"
        comment: "Jenny's Account"
        shell: /bin/bash
        create_home: true
        groups:
          - sudo
          - audio
          - video
          - plugdev
          - cdrom
          - floppy
          - netdev
          - bluetooth
          - scanner
          - lpadmin
        append: true
        state: present
    - name: Set up Jenny's initial password (change immediately, expire on first login)
      ansible.builtin.user:
        name: "{{ jenny_user }}"
        password: "{{ 'TempPassword123!' | password_hash('sha512') }}"
        update_password: on_create
    - name: Create Jenny's Desktop directory
      ansible.builtin.file:
        path: "{{ jenny_home }}/Desktop"
        state: directory
        owner: "{{ jenny_user }}"
        group: "{{ jenny_user }}"
        mode: '0755'

    - name: Set up Jenny's basic directories
      ansible.builtin.file:
        path: "{{ jenny_home }}/{{ item }}"
        state: directory
        owner: "{{ jenny_user }}"
        group: "{{ jenny_user }}"
        mode: '0755'
      loop:
        - Documents
        - Pictures
        - Music
        - Videos
        - Downloads

    # Add this task for Jenny's desktop shortcuts (place it near the other desktop shortcut tasks):
    - name: Create desktop shortcuts for Jenny
      ansible.builtin.copy:
        dest: "{{ jenny_home }}/Desktop/{{ item.name }}.desktop"
        content: |
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name={{ item.name }}
          Exec={{ item.exec }}
          Icon={{ item.icon }}
          Terminal=false
          StartupNotify=false
        mode: '0755'
        owner: "{{ jenny_user }}"
        group: "{{ jenny_user }}"
      loop:
        - { name: "System Settings", exec: "cinnamon-settings", icon: "preferences-system" }
        - { name: "Software Manager", exec: "mintinstall", icon: "applications-other" }
        - { name: "Timeshift", exec: "timeshift-gtk", icon: "document-save" }
        - { name: "KeePassXC", exec: "keepassxc", icon: "keepassxc" }

    - name: Create cleanup desktop file for Jenny
      ansible.builtin.copy:
        dest: "{{ jenny_home }}/Desktop/System Cleanup.desktop"
        content: |
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=System Cleanup
          Exec=gksudo /usr/local/bin/system-cleanup
          Icon=applications-system
          Terminal=true
          StartupNotify=false
        mode: '0755'
        owner: "{{ jenny_user }}"
        group: "{{ jenny_user }}"

    # Notify user about completion
    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          Linux Mint user-friendly setup complete!
          Installed applications:
          - LibreOffice (office suite)
          - VLC Media Player
          - GIMP (image editing)
          - Thunderbird (email)
          - KeePassXC (password manager)
          - Timeshift (system backups)
          - Various multimedia codecs
          Security features enabled:
          - UFW Firewall (enabled)
          - Automatic security updates
          - ClamAV antivirus
          Desktop shortcuts created for easy access to:
          - System Settings
          - Software Manager
          - Timeshift (backups)
          - System Cleanup tool
          Additional apps available via Flatpak:
          - Spotify, Discord, Signal, Zoom, Skype
          Remember to:
          1. Set up Timeshift for regular backups
          2. Configure email in Thunderbird
          3. Set up KeePassXC with a master password
          4. Show your wife how to use Software Manager for installing apps
